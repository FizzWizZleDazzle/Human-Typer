name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.12'] # No need for 3.9 - 3.11 as not much has changed in those versions 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true
    
    - name: Test imports
      run: |
        python -c "import sys; sys.path.insert(0, 'src'); import human_typer; print('✓ human_typer imports successfully')"
        python -c "import sys; sys.path.insert(0, 'src'); from human_typer import HumanTyper; print('✓ HumanTyper class imports successfully')"
    
    - name: Test basic functionality
      run: |
        python -c "
        import sys; sys.path.insert(0, 'src')
        from human_typer import HumanTyper
        typer = HumanTyper(use_keyboard=False)
        typer.set_speed(300)
        typer.set_error_rate(0.1)
        print('✓ Basic functionality test passed')
        "
    
    - name: Run quick tests
      run: |
        python tests/quick_test.py
      continue-on-error: true
    
    - name: Test GUI imports (Ubuntu/macOS)
      if: runner.os != 'Windows'
      run: |
        # Install virtual display for headless GUI testing
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        fi
        python -c "
        try:
            import tkinter
            print('✓ tkinter available')
        except ImportError:
            print('⚠ tkinter not available on this system')
        "
      continue-on-error: true
    
    - name: Test GUI imports (Windows)
      if: runner.os == 'Windows'
      run: |
        python -c "
        try:
            import tkinter
            print('✓ tkinter available')
            # Test GUI creation without showing window
            import sys; sys.path.insert(0, 'src')
            import human_typer_gui
            print('✓ GUI module imports successfully')
        except Exception as e:
            print(f'⚠ GUI test skipped: {e}')
        "
      continue-on-error: true

  build-test:
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test build process
      run: |
        python scripts/build.py
    
    - name: Verify executables
      run: |
        $executables = Get-ChildItem "dist" -Filter "*.exe"
        if ($executables.Count -gt 0) {
          foreach ($exe in $executables) {
            Write-Host "✓ Executable built: $($exe.Name)"
            $size = $exe.Length / 1MB
            Write-Host "  Size: $([math]::Round($size, 2)) MB"
          }
        } else {
          Write-Host "✗ No executables found"
          exit 1
        }
